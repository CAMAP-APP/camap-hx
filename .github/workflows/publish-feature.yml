name: Publish feature image to GHCR (camap-hx)

on:
  push:
    tags:
      - 'feature-*'     # ex: feature-producteur, feature-producteur-1
    branches:
      - 'feature/**'    # ex: feature/producteur

permissions:
  contents: read
  packages: write

jobs:
  verify-feature:
    name: Verify ref complies with feature rules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Verify ref (tag or branch) is allowed
        env:
          REF_NAME: ${{ github.ref_name }}
          REF_TYPE: ${{ github.ref_type }}   # 'branch' or 'tag'
        run: |
          set -euo pipefail

          echo "Ref name: ${REF_NAME}"
          echo "Ref type: ${REF_TYPE}"

          # Récupération des branches nécessaires aux checks
          git fetch --prune origin \
            +refs/heads/master:refs/remotes/origin/master \
            +refs/heads/staging:refs/remotes/origin/staging \
            '+refs/heads/feature/*:refs/remotes/origin/feature/*'

          # Interdit si le commit est contenu dans master ou staging
          if git branch -r --contains HEAD | grep -Eq 'origin/(master|staging)'; then
            echo "❌ Le commit est contenu dans master ou staging (interdit)." >&2
            exit 1
          fi

          if [ "${REF_TYPE}" = "tag" ]; then
            # Tag doit matcher feature-*
            case "${REF_NAME}" in
              feature-*) ;;
              *)
                echo "❌ Le tag '${REF_NAME}' ne commence pas par 'feature-'." >&2
                exit 1
                ;;
            esac

            # Le commit taggé doit être contenu dans au moins une branche feature/*
            if ! git branch -r --contains HEAD | grep -Eq 'origin/feature/'; then
              echo "❌ Ce tag feature-* n'est pas créé depuis une branche feature/*." >&2
              exit 1
            fi
            echo "✅ Tag feature-* valide et contenu dans une branche feature/*."

          elif [ "${REF_TYPE}" = "branch" ]; then
            # Branch doit être feature/*
            case "${REF_NAME}" in
              feature/*) echo "✅ Branche feature/* valide." ;;
              *)
                echo "❌ Les builds sur branches ne sont autorisés que pour feature/*." >&2
                exit 1
                ;;
            esac
          else
            echo "❌ Type de ref inattendu: ${REF_TYPE}" >&2
            exit 1
          fi

  build-and-push:
    name: Build & push camap-hx
    needs: verify-feature
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/camap-app/camap-hx
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ====== Cas 1 : build sur TAG feature-* ======
      - name: Prepare tag-based metadata
        id: tag_meta
        if: github.ref_type == 'tag'
        run: |
          set -euo pipefail
          ref="${GITHUB_REF_NAME}"             # ex: feature-producteur-1
          # Un tag "branch-like" supplémentaire: feature-<nom>-<SHA8>
          short_sha="$(git rev-parse --short=8 HEAD)"
          # Sanitize pour docker tag (sécurité)
          sanitized="${ref// /-}"
          echo "tag=${sanitized}" >> "$GITHUB_OUTPUT"
          echo "tag_sha=${sanitized}-${short_sha}" >> "$GITHUB_OUTPUT"

      - name: Build & push (tag feature-*)
        if: github.ref_type == 'tag'
        uses: docker/build-push-action@v6
        env:
          BUILDKIT_PROGRESS: plain
        with:
          context: .
          file: ./camap-hx.Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tag_meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.tag_meta.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ====== Cas 2 : build sur BRANCHE feature/* ======
      - name: Prepare branch-based metadata
        id: branch_meta
        if: github.ref_type == 'branch'
        run: |
          set -euo pipefail
          b="${GITHUB_REF_NAME}"                # ex: feature/producteur
          b_sanitized="${b//\//-}"              # ex: feature-producteur
          short_sha="$(git rev-parse --short=8 HEAD)"
          echo "branch=${b_sanitized}"                  >> "$GITHUB_OUTPUT"
          echo "branch_sha=${b_sanitized}-${short_sha}" >> "$GITHUB_OUTPUT"

      - name: Build & push (feature/*)
        if: github.ref_type == 'branch'
        uses: docker/build-push-action@v6
        env:
          BUILDKIT_PROGRESS: plain
        with:
          context: .
          file: ./camap-hx.Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.branch_meta.outputs.branch }}
            ${{ env.IMAGE_NAME }}:${{ steps.branch_meta.outputs.branch_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
